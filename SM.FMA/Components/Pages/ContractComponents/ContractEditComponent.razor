@using SM.FMA.Components.Pages.FacultyMemberComponents
@using SM.FMA.Data.Entities
@inject IContractService ContractService
@inject IFacultyMemberService FacultyMemberService

@using MudBlazor

@if (selectedContract != null)
{
    <MudDialog>
        <DialogContent>
            <MudForm @ref="_form">
                <MudDatePicker @bind-Value="selectedContract!.Date" Label="Date" Required="true" />
                <MudTextField @bind-Value="selectedContract.ScanUri" Label="Scan URI" Disabled="true" />
                <MudItem >
                <InputFile id="inputContract" OnChange="OnFileChanged" hidden multiple />
                <MudButton HtmlTag="label"
                    Color="Color.Info"
                    StartIcon="@Icons.Material.Filled.CloudUpload"
                    for="inputContract">
                    تحميل عقد
                </MudButton>
                </MudItem>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Save" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
            <MudButton OnClick="Cancel" Color="Color.Secondary" Variant="Variant.Text">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    const int MaxFileSize = 10 * 1024 * 1024; // 10 MB


    [Parameter] public Guid FacultyMemberId { get; set; }
    [Parameter] public Guid ContractId { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [CascadingParameter] public required IMudDialogInstance MudDialog { get; set; }

    private Contract? selectedContract { get; set; }
    private MudForm? _form;
    private IBrowserFile? uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        if (ContractId == Guid.Empty)
        {
            selectedContract = new Contract
            {
                FacultyMemberId = FacultyMemberId,
                ScanUri = string.Empty,
                FacultyMember = null!
            };
        }
        else
        {
            selectedContract = await ContractService.GetFacultyMemberContractAsync(ContractId);
        }
    }

    private async Task Save()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid)
                return;
        }
        await ContractService.UpsertContractAsync(selectedContract!);
        if (OnSave.HasDelegate)
            await OnSave.InvokeAsync();
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        //check if there is an uploaded file and delete it if necessary
        if (uploadedFile != null)
        {
            var filePath = Path.Combine("wwwroot", "contracts", selectedContract!.ScanUri.Split('/').Last());
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
            }
        }
        MudDialog.Cancel();
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        var facultyMember = await FacultyMemberService.GetFacultyMemberAsync(FacultyMemberId);
        if (uploadedFile != null && uploadedFile.ContentType == "application/pdf" && uploadedFile.Size < MaxFileSize)
        {
            var academicId = facultyMember.AcademicId;
            var year = selectedContract?.Date?.Year ?? DateTime.Now.Year;
            var fileName = $"contract_{academicId}_{year}.pdf";
            var folderPath = Path.Combine("wwwroot", "contracts", academicId);
            Directory.CreateDirectory(folderPath);
            var filePath = Path.Combine(folderPath, fileName);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await uploadedFile.OpenReadStream(MaxFileSize).CopyToAsync(stream);
            }
            selectedContract!.ScanUri = $"/contracts/{academicId}/{fileName}";
        }
    }
}
