@page "/FacultyMemberComponents/EditFacultyMember"
@page "/FacultyMemberComponents/EditFacultyMember/{Id:Guid}"
@inject IFacultyMemberService FacultyMemberService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer


@if (facultyMember == null)
{
    <div class="d-flex justify-center align-center ma-auto">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}
else
{

    <MudForm Model="@facultyMember" @ref="form">
        <MudCard Elevation="6">
            <MudCardHeader>
                <MudText Typo="Typo.h6">@PageHeaderText</MudText>
            </MudCardHeader>

            <MudCardContent>
                <MudGrid Spacing="3">
                    <MudItem lg="6" md="12" xs="12">
                        <MudTextField T="string"
                                      Label="«·≈”„"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.Name"
                                      Required="true"
                                      RequiredError="Name is required" />
                    </MudItem>

                    <MudItem lg="4" md="6" xs="12">
                        <MudTextField T="string"
                                      Label="«·»—Ìœ «·≈·ﬂ —Ê‰Ì"
                                      md="6"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.Email"
                                      Required="true"
                                      RequiredError="Email is required" />
                    </MudItem>
                    <MudItem lg="2" md="6" xs="12">
                        <MudTextField T="string"
                                      Label="—ﬁ„ «·Â« ›"
                                      md="6"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.PhoneNumber"
                                      Style="direction:ltr" />
                    </MudItem>

                </MudGrid>
            </MudCardContent>

            <MudCardActions Class="d-flex justify-end mt-2">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           OnClick="HandleSaveAsync">Õ›Ÿ</MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="HandleSaveAndCloseAsync">Õ›Ÿ Ê ≈€·«ﬁ</MudButton>
            </MudCardActions>

            <CascadingValue Value="facultyMember.Id" Name="FacultyMemberId">
               
                <MudTabs Elevation="4" Rounded="true" Centered="true" Color="Color.Primary">
                    <MudTabPanel Text="«·‘Â«œ« ">                    </MudTabPanel>
                    <MudTabPanel Text="„‰‘Ê—« " BadgeData="facultyMember.PublicationsCount" BadgeColor="Color.Error">
                        <SM.FMA.Components.Pages.PublicationComponents.PublicationsComponent />
                    </MudTabPanel>
                    <MudTabPanel Text="«·„‰«’»"></MudTabPanel>
                    <MudTabPanel Text="«·œ—Ã«  «·⁄·„Ì…"></MudTabPanel>
                    <MudTabPanel Text="«·œ—Ã«  «·ÊŸÌ›Ì…"></MudTabPanel>
                </MudTabs>

            </CascadingValue>


        </MudCard>
    </MudForm>

}


@code {
    protected bool success = false;
    protected MudForm? form;

    [Parameter] public string Id { get; set; } = string.Empty;

    private FacultyMemberDto? facultyMember { get; set; }
    private string PageHeaderText = "Add Faculty Member";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            facultyMember = new FacultyMemberDto();
            PageHeaderText = "≈÷«›… ⁄÷Ê ÂÌ∆…  œ—Ì”";
        }
        else
        {
            PageHeaderText = " ⁄œÌ· ⁄÷Ê ÂÌ∆…  œ—Ì”";
            facultyMember = await FacultyMemberService.GetFacultyMemberAsync(Guid.Parse(Id));

        }
    }

    protected async Task HandleSaveAsync()
    {


        await FacultyMemberService.UpsertFacultyMemberAsync(facultyMember);
        Snackbar.Add(" „ Õ›Ÿ «·»Ì«‰« ", Severity.Success);
    }


    protected async Task HandleSaveAndCloseAsync()
    {

        await FacultyMemberService.UpsertFacultyMemberAsync(facultyMember);
        NavigationManager.NavigateTo($"/facultyMembers", true);


    }
} 