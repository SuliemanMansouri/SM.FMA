@using MudBlazor
@using SM.FMA.Components.Pages.Dialogs
@using SM.FMA.Data.Entities
@inject IContractService ContractService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

@if (Contracts == null)
{
    <div class="d-flex justify-center align-center ma-auto">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}
else
{
    <MudTable Items="Contracts" Hover="true" @bind-SelectedItem="SelectedContract" Dense="true">
        <ToolBarContent>
            <MudSpacer />
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="OpenAddDialog">جديد</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Contract, object>(x => x.Date)">تاريخ العقد</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Contract, object>(x => x.ScanUri)">العنوان</MudTableSortLabel></MudTh>
            <MudTh>العمليات</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="تاريخ العقد">@context.Date?.ToString("yyyy/MM/dd")</MudTd>
            <MudTd DataLabel="موقع صورة العقد">@context.ScanUri</MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="() => OpenEditContractDialog(context)">تعديل</MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Variant="Variant.Filled"
                           Color="Color.Error"
                           OnClick="() => DeleteContract(context)">حذف</MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Scanner"
                           Variant="Variant.Filled"
                           Color="Color.Info"
                           OnClick="()=> ShowContractScan(context.Id)">عرض العقد</MudIconButton>

        </RowTemplate>
    </MudTable>

}
@code {
    [CascadingParameter(Name = "FacultyMemberId")] public Guid FacultyMemberId { get; set; }
    [Parameter] public EventCallback OnContractSaved { get; set; }
    
    private readonly DialogOptions _dialogOptions = new DialogOptions
    {
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        CloseButton = true,
        CloseOnEscapeKey = true
    };

    private List<Contract> Contracts { get; set; } = [];

    private Contract SelectedContract { get; set; } = new()
    {   
        ScanUri = string.Empty, // Initialize required property 'ScanUri'
        FacultyMemberId = Guid.NewGuid() // Initialize with a default value
    };
    protected override async Task OnInitializedAsync()
    {
        await LoadContracts();
    }

    private async Task LoadContracts()
    {
        try
        {
            Contracts = await ContractService.GetFacultyMemberContractsAsync(FacultyMemberId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"حدث خطأ أثناء تحميل العقود: {ex.Message}", Severity.Error);
        }
    }
    private void OpenAddDialog(MouseEventArgs args)
    {
        SelectedContract = new Contract { FacultyMemberId = FacultyMemberId, ScanUri = string.Empty };

        var parameters = new DialogParameters
        {
            ["ContractId"] = null,
            ["FacultyMemberId"] = FacultyMemberId
        };

        DialogService.ShowAsync<ContractEditComponent>(
            "إضافة عقد",
            parameters,
            new DialogOptions { MaxWidth = MaxWidth.Medium }
        );
    }

    private void OpenEditContractDialog(Contract contract)
    {
        SelectedContract = contract;

        var parameters = new DialogParameters
        {
            ["ContractId"] = contract.Id,
            ["FacultyMemberId"] = FacultyMemberId
        };

        DialogService.ShowAsync<ContractEditComponent>(
            "تعديل عقد",
            parameters,
            new DialogOptions { MaxWidth = MaxWidth.Medium }
        );
    }

    private async Task DeleteContract(Contract contract)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"هل أنت متأكد من حذف العقد؟" },
            { "ConfirmationText", "حذف" },
            { "CancelText", "إلغاء" },
            { "Color", Color.Error }
        };
       
        var _dialogOptions = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            BackdropClick = false
        };
        var msg = $"هل أنت متأكد من حذف العقد";

        var dialog = await DialogService.ShowAsync<ConfirmDelete>(msg, parameters, _dialogOptions);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            try
            {
                await ContractService.DeleteContract(contract.Id);
                Snackbar.Add("تم حذف العقد بنجاح", Severity.Success);
                Contracts.Remove(contract);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"حدث خطأ أثناء حذف العقد: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ShowContractScan(Guid id)
    {
        var contract = Contracts.FirstOrDefault(c => c.Id == id);
        if (contract == null || string.IsNullOrWhiteSpace(contract.ScanUri))
        {
            Snackbar.Add("لا يوجد ملف لهذا العقد", Severity.Warning);
            return;
        }
        var parameters = new DialogParameters
        {
            ["ScanUri"] = contract.ScanUri
        };
        await DialogService.ShowAsync<ContractPdfViewer>("عرض ملف العقد", parameters, _dialogOptions);
    }
}
