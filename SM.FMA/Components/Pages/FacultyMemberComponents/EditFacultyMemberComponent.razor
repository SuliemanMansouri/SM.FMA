@page "/FacultyMemberComponents/EditFacultyMember"
@page "/FacultyMemberComponents/EditFacultyMember/{Id:Guid}"
@using SM.FMA.Data.Enums
@using SM.FMA.Extensions
@inject IFacultyMemberService FacultyMemberService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer


@if (facultyMember == null)
{
    <div class="d-flex justify-center align-center ma-auto">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}
else
{

    <MudForm Model="@facultyMember" @ref="form">
        <MudCard Elevation="6">
            <MudCardHeader>
                <MudText Typo="Typo.h6">@PageHeaderText</MudText>
            </MudCardHeader>

            <MudCardContent>
                <MudGrid Spacing="1">
                    <MudItem lg="2" md="2" xs="12">
                        <MudTextField T="string"
                                      Label="«·—ﬁ„ «·ÊŸÌ›Ì"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.EmployeeId" />
                    </MudItem>
                    <MudItem lg="2" md="2" xs="12">
                        <MudTextField T="string"
                                      Label="«·—ﬁ„ «·√ﬂ«œÌ„Ì"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.AcademicId" />
                    </MudItem>
                    <MudItem lg="2" md="2" xs="12">
                        <MudTextField T="string"
                                      Label="«·—ﬁ„ «·Êÿ‰Ì"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.NID" />
                    </MudItem>
                    <MudItem lg="2" md="2" xs="12">
                        <MudTextField T="string"
                                      Label="—ﬁ„ «·ﬁÌœ"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.RegistrationNumber" />
                    </MudItem>
                    <MudItem lg="2" md="2" xs="12">
                        <MudTextField T="string"
                                      Label="«·—ﬁ„ «·÷„«‰Ì"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.SSN" />
                    </MudItem>
                    <MudItem lg="2" md="2" xs="12">
                        <MudTextField T="string"
                                      Label="«·—ﬁ„ «·„«·Ì"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.FinancialNumber" />
                    </MudItem>
                    <MudItem lg="6" md="12" xs="12">
                        <MudTextField T="string"
                                      Label="«·≈”„"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.NameAr"
                                      Required="true"
                                      RequiredError="Name is required" />
                    </MudItem>

                    <MudItem lg="6" md="12" xs="12">
                        <MudTextField T="string"
                                      Label="Name"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.NameEn"
                                      Required="true"
                                      RequiredError="Name is required" />
                    </MudItem>
                    <MudItem lg="2" md="4" xs="12">
                        <MudSelect T="ContractualDesignation"
                                      Label="«·Ê’› «·ÊŸÌ›Ì"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Required="true"
                                      RequiredError="Department is required">
                            @foreach (var item in EnumExtensions.GetEnumDisplayNames<ContractualDesignation>())
                            {
                                <MudSelectItem Value="@(item.Key)">@item.Value</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem lg="2" md="4" xs="12">
                        <MudTextField T="string"
                                      Label="«·»—Ìœ «·≈·ﬂ —Ê‰Ì"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.Email"
                                      Required="true"
                                      RequiredError="Email is required" />
                    </MudItem>
                    <MudItem lg="2" md="4" xs="12">
                        <MudTextField T="string"
                                      Label="—ﬁ„ «·Â« ›"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.PhoneNumber" />
                    </MudItem>
                    <MudItem lg="2" md="4" xs="12">
                        <MudTextField T="DateTime"
                                      Label=" «—ÌŒ «·„Ì·«œ"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.DOB"
                                      Format="yyyy/MM/dd" />
                    </MudItem>
                    <MudItem lg="2" md="4" xs="12">
                        <MudTextField T="string"
                                      Label="„ﬂ«‰ «·„Ì·«œ"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.POB" />
                    </MudItem>

                    <MudItem lg="2" md="4" xs="12">
                        <MudSelect T="char"
                                   Label="«·Ã‰”"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   @bind-Value="facultyMember.Sex">
                            <MudSelectItem Value="@('M')">
                                <MudIcon Icon="@Icons.Material.Filled.Man" />
                                –ﬂ—
                            </MudSelectItem>
                            <MudSelectItem Value="@('F')">
                                <MudIcon Icon="@Icons.Material.Filled.Woman" />
                                √‰ÀÏ
                            </MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem lg="4" md="4" xs="12">
                        <MudTextField T="string"
                                      Label="—ﬁ„ «·Õ”«»"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.IBAN" />
                    </MudItem>
                    <MudItem lg="4" md="4" xs="12">
                        <MudTextField T="string"
                                      Label="«·€—⁄"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.BranchName" />
                    </MudItem>
                    <MudItem lg="4" md="4" xs="12">
                        <MudTextField T="string"
                                      Label="«·„’—›"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @bind-Value="facultyMember.BankName" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>

            <MudCardActions Class="d-flex justify-end mt-2">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           OnClick="HandleSaveAsync">Õ›Ÿ</MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="HandleSaveAndCloseAsync">Õ›Ÿ Ê ≈€·«ﬁ</MudButton>
            </MudCardActions>

            <CascadingValue Value="facultyMember.Id" Name="FacultyMemberId">

                <MudTabs Elevation="4" Rounded="true" Centered="true" Color="Color.Primary">
                    <MudTabPanel Text="«·⁄ﬁÊœ" >
                        <SM.FMA.Components.Pages.ContractComponents.ContractsListComponent />
                    </MudTabPanel>
                   @*  <MudTabPanel Text="«·√⁄»«¡ «·œ—«”Ì…">
                        <SM.FMA.Components.Pages.TeachingLoadComponents.TeachingLoadListComponent />
                    </MudTabPanel> *@
                    <MudTabPanel Text="«·‘Â«œ« " BadgeData="facultyMember.CertificatesCount" BadgeColor="Color.Error">
                        <SM.FMA.Components.Pages.CertificateComponents.CertificatesComponent OnCertificateSaved="UpdateCertificatesCount" />
                    </MudTabPanel>
                    <MudTabPanel Text="„‰‘Ê—« " BadgeData="facultyMember.PublicationsCount" BadgeColor="Color.Error">
                        <SM.FMA.Components.Pages.PublicationComponents.PublicationsComponent OnPublicationSaved="UpdatePublicationsCount" />
                    </MudTabPanel>
                    <MudTabPanel Text="«·„‰«’»"></MudTabPanel>
                    <MudTabPanel Text="«·œ—Ã«  «·⁄·„Ì…"></MudTabPanel>

                </MudTabs>

            </CascadingValue>


        </MudCard>
    </MudForm>

}


@code {
    protected bool success = false;
    protected MudForm? form;

    [Parameter] public string Id { get; set; } = string.Empty;

    private FacultyMemberDto? facultyMember { get; set; }
    private string PageHeaderText = "Add Faculty Member";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            facultyMember = new FacultyMemberDto();
            PageHeaderText = "≈÷«›… ⁄÷Ê ÂÌ∆…  œ—Ì”";
        }
        else
        {
            PageHeaderText = " ⁄œÌ· ⁄÷Ê ÂÌ∆…  œ—Ì”";
            facultyMember = await FacultyMemberService.GetFacultyMemberAsync(Guid.Parse(Id));

        }
    }

    protected async Task HandleSaveAsync()
    {


        await FacultyMemberService.UpsertFacultyMemberAsync(facultyMember);
        Snackbar.Add(" „ Õ›Ÿ «·»Ì«‰« ", Severity.Success);
    }


    protected async Task HandleSaveAndCloseAsync()
    {

        await FacultyMemberService.UpsertFacultyMemberAsync(facultyMember);
        NavigationManager.NavigateTo($"/facultyMembers", true);
    }

    private async Task UpdatePublicationsCount()
    {
        if (facultyMember != null)
        {
            var updatedFacultyMember = await FacultyMemberService.GetFacultyMemberAsync(facultyMember.Id);
            if (updatedFacultyMember != null)
            {
                facultyMember.PublicationsCount = updatedFacultyMember.PublicationsCount;
            }
        }
    }

    private async Task UpdateCertificatesCount()
    {
        if (facultyMember != null)
        {
            var updatedFacultyMember = await FacultyMemberService.GetFacultyMemberAsync(facultyMember.Id);
            if (updatedFacultyMember != null)
            {
                facultyMember.CertificatesCount = updatedFacultyMember.CertificatesCount;
            }
        }
    }

    private void SetSex(bool args)
    {
        if (facultyMember == null)
        {
            return;
        }

        if (args == true)
        {
            facultyMember.Sex = 'M';
        }
        else
        {
            facultyMember.Sex = 'F';
        }
    }
}