@using SM.FMA.Components.Pages.Dialogs
@inject ICertificateService CertificateService
@inject IDialogService DialogService
@inject ISnackbar Snackbar


@if (certificates == null)
{
    <div class="d-flex justify-center align-center ma-auto">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}
else
{
    <MudTable Items="certificates" Hover="true" @bind-SelectedItem="selectedCertificate" Breakpoint="Breakpoint.Sm" Dense="true">
        <ToolBarContent>
            <MudSpacer />
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="AddCertificate">جديد</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>الدرجة العلمية</MudTh>
            <MudTh>المؤسسة المانحة</MudTh>
            <MudTh>تاريخ المنح</MudTh>
            <MudTh>العمليات</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="الدرجة العلمية">@context.Degree</MudTd>
            <MudTd DataLabel="المؤسسة المانحة">@context.Institution</MudTd>
            <MudTd DataLabel="تاريخ المنح">@context.DateAwarded.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@(() => EditCertificate(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Variant="Variant.Filled"
                               Color="Color.Error"
                               OnClick="@(() => DeleteCertificate(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}


@code
{
    [CascadingParameter(Name = "FacultyMemberId")] public Guid FacultyMemberId { get; set; }
    [Parameter] public EventCallback OnCertificateSaved { get; set; }

    private List<CertificateDto>? certificates = new();
    private CertificateDto selectedCertificate = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificates();
    }

    private async Task LoadCertificates()
    {
        certificates = (await CertificateService.GetCertificatesAsync(FacultyMemberId)).ToList();
    }

    private void AddCertificate()
    {
        var parameters = new DialogParameters
        {
            ["CertificateId"] = null,
            ["FacultyMemberId"] = FacultyMemberId,
            ["OnSave"] = EventCallback.Factory.Create(this, OnCertificateSaved)
        };
        selectedCertificate = new CertificateDto { FacultyMemberId = FacultyMemberId };

        DialogService.ShowAsync<EditCertificate>("إضافة شهادة",
        parameters,
        new DialogOptions { MaxWidth = MaxWidth.Small });

    }

    private async Task EditCertificate(Guid id)
    {
        var parameters = new DialogParameters
        {
            ["CertificateId"] = null,
            ["FacultyMemberId"] = FacultyMemberId,
            ["OnSave"] = EventCallback.Factory.Create<CertificateDto>(this, OnCertificateSaved)
        };
        selectedCertificate = new CertificateDto { FacultyMemberId = FacultyMemberId };
        var dialog = await DialogService.ShowAsync<EditCertificate>("تعديل شهادة",
        parameters,
        new DialogOptions { MaxWidth = MaxWidth.Small });
    }

    private async Task DeleteCertificate(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "هل أنت متأكد من عملية الحذف؟" },
            { "ConfirmationText", "حذف" },
            { "CancelText", "إلغاء" },
            { "Color", Color.Error }
        };

        var _dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, BackdropClick = false };
        var msg = $"سيتم حذف الشهادة: {selectedCertificate.Degree}";
        var dialog = await DialogService.ShowAsync<ConfirmDelete>(msg, parameters, _dialogOptions);
        if (dialog is not null && !dialog.Result.IsCanceled)
        {
            await CertificateService.DeleteCertificateAsync(id);
            Snackbar.Add("تم الحذف بنجاح", Severity.Success);
            await LoadCertificates();
            await OnCertificateSaved.InvokeAsync();
        }
    }
}